$prefix: 'nev';

@mixin theme($theme) {
  $theme: $theme !global;
  @include set-variables($theme);
  @include colors($theme);
}

@mixin set-variables($theme) {
  $spacer: 4px !global;
  $row-spacer: $spacer * 2 !global;
  $column-spacer: $spacer * 2 !global;

  $content-padding: $spacer * 5 !global;

  $icon-height: 24px !global;

  :root {
    --nev-spacer: #{$spacer};
    --nev-row-spacer: #{$row-spacer};
    --nev-column-spacer: #{$column-spacer};
    --nev-content-padding: #{$content-padding};
    --nev-icon-height: #{$icon-height};
  }
}

@mixin colors($theme) {
  $primary: map-get($theme, primary);
  $accent: map-get($theme, accent);
  $warn: map-get($theme, warn);

  :root {
    --nev-primary-color: #{map-get($primary, default)};
    --nev-accent-color: #{map-get($accent, default)};
    --nev-warn-color: #{map-get($warn, default)};
  }

  @include generateColors('primary', $primary);
  @include generateColors('accent', $accent);
  @include generateColors('warn', $warn);
}

@mixin generateColors($paletteName, $palette) {
  $colors-map: ();

  @each $key, $value in $palette {
    @if $key !=contrast {
      #{$prefix}-#{$key} {
        color: map-get($palette, $key);
      }

      $map: ();
      $map: map-merge(
        $map,
        (
          $key: $value,
        )
      );
      $colors-map: map-merge($colors-map, $map);
    }
  }

  :root {
    @each $key, $value in $colors-map {
      --#{$prefix}-#{$paletteName}-#{$key}: #{$value};
    }
  }
}
